{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kirca\\\\Downloads\\\\vol1-main\\\\vol1-main\\\\frontend\\\\src\\\\edits\\\\Artist.js\",\n    _s = $RefreshSig$();\n\n// This is the pArtist where the user is directed after logging in.\nimport '../styles/home.css';\nimport volumefy from \"../images/volumefy.png\";\nimport { useHistory } from \"react-router-dom\";\nimport * as React from \"react\";\nimport Axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst jwt = require('jsonwebtoken');\n\nconst Artist = () => {\n  _s();\n\n  // We'll store all the users in the database inside this list.\n  const [userList, setUserList] = useState([]); // useState for new gender.\n\n  const [newArtist, setNewArtist] = useState(\"\");\n  let history = useHistory(); // On load, get the token from the local storArtist and get\n  // the id from it.\n\n  React.useEffect(() => {\n    // var response = localStorArtist.getItem(\"response\");\n    // response = jwt.decode(response);\n    // response = response.id;\n    // console.log(response);\n    // Send a get request to the database. \n    Axios.get(\"http://localhost:3001/users\").then(response2 => {\n      setUserList(response2.data);\n    });\n  }); // This method is to delete the access token from the local storArtist\n  // and route back to the \"/\".\n\n  const logOut = () => {\n    localStorage.clear();\n    history.push(\"/\");\n  }; // This method is to route to the home pArtist.\n\n\n  const toHome = () => {\n    history.push(\"/Home\");\n  }; // This method is to route to the profile pArtist.\n\n\n  const toProfile = () => {\n    history.push(\"/Profile\");\n  }; // This method is to route to the search pArtist.\n\n\n  const toSearch = () => {\n    history.push(\"/Search\");\n  };\n\n  const editArtist = id => {\n    Axios.put(\"http://localhost:3001/editArtist\", {\n      artist: newArtist,\n      id: id\n    }).then(response => {\n      setUserList(userList.map(val => {\n        return val.id == id ? {\n          artist: newArtist\n        } : val;\n      }));\n    });\n    history.push(\"/Profile\");\n  };\n\n  const addArtist = event => {\n    var id = null;\n    setId(id); // If there's any null element, don't load the new\n    // page nor add the element to the table.\n\n    if (!username || !email || !password) {\n      event.preventDefault();\n    } // Add elements to the database.\n    else {\n        Axios.post(\"http://localhost:3001/create\", {\n          id: id,\n          username: username,\n          email: email,\n          password: password\n        }).then(() => {\n          setUserList([...userlist, {\n            id: id,\n            username: username,\n            email: email,\n            password: password\n          }]);\n        });\n        history.push(\"/login\");\n      }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    class: \"bMain\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"header\",\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: volumefy,\n          className: \"logo2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"vol\",\n          children: \" VOLUMEFY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"upper\",\n          className: \"upper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout\",\n          onClick: logOut,\n          children: \"SIGN Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"left\",\n        className: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"homeButton\",\n          onClick: toHome,\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 72\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 77\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"profileButton\",\n          onClick: toProfile,\n          children: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 86\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"searchButton\",\n          onClick: toSearch,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 78\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 83\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"libraryButton\",\n          children: \"Library\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), userList.map((val, key) => {\n        // Can't get the response from the Profile. We need to define it again.\n        var response = localStorage.getItem(\"response\");\n        response = jwt.decode(response);\n        response = response.id; // If the id of the user is equal to the response, show user's\n        // info in the div \"middle\".\n\n        if (val.id == response) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"middle\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Artist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter the artist name\",\n              onChange: event => {\n                setNewArtist(event.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 129\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 135\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter the genre\",\n              onChange: event => {\n                setNewArtist(event.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 123\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 129\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                editArtist(val.id);\n              },\n              children: [\" \", \"Create!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 18\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"right\",\n        className: \"right\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Friends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Artist, \"m/Gg/H0XFety7RlHC1dEeegnn8w=\", false, function () {\n  return [useHistory];\n});\n\n_c = Artist;\nexport default Artist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Artist\");","map":{"version":3,"sources":["C:/Users/kirca/Downloads/vol1-main/vol1-main/frontend/src/edits/Artist.js"],"names":["volumefy","useHistory","React","Axios","useState","jwt","require","Artist","userList","setUserList","newArtist","setNewArtist","history","useEffect","get","then","response2","data","logOut","localStorage","clear","push","toHome","toProfile","toSearch","editArtist","id","put","artist","response","map","val","addArtist","event","setId","username","email","password","preventDefault","post","userlist","key","getItem","decode","target","value"],"mappings":"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","sourcesContent":["// This is the pArtist where the user is directed after logging in.\r\nimport '../styles/home.css';\r\nimport volumefy from \"../images/volumefy.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport Axios from \"axios\";\r\nimport {useState} from \"react\";\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst Artist = () => {\r\n  // We'll store all the users in the database inside this list.\r\n  const [userList, setUserList] = useState([]);\r\n\r\n  // useState for new gender.\r\n  const [newArtist, setNewArtist] = useState(\"\");\r\n\r\n  let history = useHistory();\r\n\r\n  // On load, get the token from the local storArtist and get\r\n  // the id from it.\r\n  React.useEffect(() => {\r\n    // var response = localStorArtist.getItem(\"response\");\r\n    // response = jwt.decode(response);\r\n    // response = response.id;\r\n    // console.log(response);\r\n\r\n    // Send a get request to the database. \r\n    Axios.get(\"http://localhost:3001/users\").then((response2) => {\r\n        setUserList(response2.data)\r\n    })\r\n  })\r\n\r\n  // This method is to delete the access token from the local storArtist\r\n  // and route back to the \"/\".\r\n  const logOut = () => {\r\n    localStorage.clear();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // This method is to route to the home pArtist.\r\n  const toHome = () => {\r\n    history.push(\"/Home\")\r\n  }\r\n\r\n  // This method is to route to the profile pArtist.\r\n  const toProfile = () => {\r\n    history.push(\"/Profile\")\r\n  }\r\n\r\n  // This method is to route to the search pArtist.\r\n  const toSearch = () => {\r\n    history.push(\"/Search\")\r\n  }\r\n\r\n  const editArtist = (id) => {\r\n    Axios.put(\"http://localhost:3001/editArtist\", { artist: newArtist, id: id }).then(\r\n      (response) => {\r\n        setUserList(\r\n          userList.map((val) => {\r\n            return val.id == id\r\n              ? {\r\n                  artist: newArtist,\r\n                }\r\n              : val;\r\n          })\r\n        );\r\n      }\r\n    );\r\n    history.push(\"/Profile\")\r\n  };\r\n\r\n  const addArtist = (event) => {\r\n    var id =  null;\r\n    setId(id);\r\n    // If there's any null element, don't load the new\r\n    // page nor add the element to the table.\r\n    if(!username || !email || !password){\r\n      event.preventDefault();\r\n    }\r\n    // Add elements to the database.\r\n    else{\r\n      Axios.post(\"http://localhost:3001/create\", {\r\n        id: id,\r\n        username: username,\r\n        email: email,\r\n        password: password,\r\n      }).then(() => {\r\n        setUserList([\r\n          ...userlist,\r\n          {\r\n            id: id,\r\n            username: username,\r\n            email: email,\r\n            password: password,\r\n          },\r\n        ]);\r\n      });\r\n      history.push(\"/login\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <body class=\"bMain\">\r\n    <div className=\"Main\" >\r\n      {/* Name and logo */}\r\n        <div id = \"header\" className = \"header\">\r\n            <img src={volumefy} className=\"logo2\"/>\r\n            <h1 className=\"vol\"> VOLUMEFY</h1>\r\n            <div id = \"upper\" className = \"upper\"></div>\r\n            <button className=\"logout\" onClick={logOut}>SIGN Out</button>\r\n            <hr/>\r\n        </div>\r\n        {/* Navigation buttons */}\r\n        <div id = \"left\" className = \"left\">\r\n          <br />\r\n          <button className=\"homeButton\" onClick={toHome}>Home</button><br/><br/>\r\n          <button className=\"profileButton\" onClick={toProfile}>Profile</button><br/><br/>\r\n          <button className=\"searchButton\" onClick={toSearch}>Search</button><br/><br/>\r\n          <button className=\"libraryButton\">Library</button>\r\n        </div>\r\n        {userList.map((val, key) => {\r\n          // Can't get the response from the Profile. We need to define it again.\r\n          var response = localStorage.getItem(\"response\");\r\n          response = jwt.decode(response);\r\n          response = response.id;\r\n          // If the id of the user is equal to the response, show user's\r\n          // info in the div \"middle\".\r\n          if(val.id == response){\r\n          return <div className=\"middle\"> \r\n              <h1>Artist</h1>\r\n              <input type=\"text\" placeholder=\"Enter the artist name\" onChange={(event) => {setNewArtist(event.target.value);}}/><br /><br />\r\n              <input type=\"text\" placeholder=\"Enter the genre\" onChange={(event) => {setNewArtist(event.target.value);}}/><br /><br />\r\n              <button onClick={() => {editArtist(val.id);}}>{\" \"}Create!</button>\r\n          </div>\r\n        }})}\r\n\r\n        {/* Friends */}\r\n        <div id = \"right\" className = \"right\">\r\n          <h2>Friends</h2>\r\n        </div>\r\n    </div>\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default Artist;"]},"metadata":{},"sourceType":"module"}