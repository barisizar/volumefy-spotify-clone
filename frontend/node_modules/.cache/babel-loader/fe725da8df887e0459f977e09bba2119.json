{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kirca\\\\Desktop\\\\volumify\\\\volumify\\\\frontend\\\\src\\\\Login.js\",\n    _s = $RefreshSig$();\n\n// Importing the necessary libraries.\nimport './login.css';\nimport volumefy from \"./volumefy.png\";\nimport { useState } from \"react\";\nimport Axios from \"axios\";\nimport { Link, useHistory } from \"react-router-dom\"; // LOGIN PAGE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  let history = useHistory(); // This method is to login.\n\n  const loginUser = async (req, res) => {\n    const username = req.body.username;\n    const password = req.body.password;\n    db.query(\"SELECT password FROM users WHERE username=? \", username, async function (error, results) {\n      console.log(results);\n\n      if (error) {\n        res.send({\n          code: 400,\n          failed: \"error occurred\",\n          error: error\n        });\n      } else {\n        if (results) {\n          const comparison = await bcrypt.compare(password, results[0].password);\n\n          if (comparison) {\n            const accessToken = jwt.sign({\n              username: username\n            }, accessTokenSecret);\n            res.send({\n              code: 200,\n              accessToken,\n              success: \"login successful\"\n            });\n          } else {\n            res.send({\n              code: 204,\n              error: \"Username and password does not match\"\n            });\n          }\n        } else {\n          res.send({\n            \"code\": 206,\n            \"error\": \"Username does not exist\"\n          });\n        }\n      }\n    });\n  };\n\n  const logUser = e => {\n    Axios.post(\"http://localhost:3001/login\", {\n      username: username,\n      password: password\n    }).then(response => {\n      console.log(response.data);\n      const status = response.data.code;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: volumefy,\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"h1text\",\n        children: \" VOLUMEFY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome back!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      type: \"text\",\n      onChange: event => {\n        setUsername(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      type: \"password\",\n      onChange: event => {\n        setPassword(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logUser,\n      children: \"SIGN IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"/nE+1o6xRAtcM7F1DwdqQmRYBrw=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/kirca/Desktop/volumify/volumify/frontend/src/Login.js"],"names":["volumefy","useState","Axios","Link","useHistory","Login","username","setUsername","password","setPassword","history","loginUser","req","res","body","db","query","error","results","console","log","send","code","failed","comparison","bcrypt","compare","accessToken","jwt","sign","accessTokenSecret","success","logUser","e","post","then","response","data","status","event","target","value"],"mappings":"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","sourcesContent":["// Importing the necessary libraries.\r\nimport './login.css';\r\nimport volumefy from \"./volumefy.png\";\r\nimport { useState } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n// LOGIN PAGE\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  let history = useHistory();\r\n\r\n\r\n  // This method is to login.\r\nconst loginUser = async (req, res) => {\r\n  \r\n  const username = req.body.username;\r\n  const password = req.body.password;\r\n  db.query(\r\n    \"SELECT password FROM users WHERE username=? \",\r\n    username,\r\n    async function (error, results) {\r\n      console.log(results);\r\n      if (error) {\r\n        res.send({\r\n          code: 400,\r\n          failed: \"error occurred\",\r\n          error: error,\r\n        });\r\n      } \r\n      else {\r\n        if(results) {\r\n          const comparison = await bcrypt.compare(\r\n            password,\r\n            results[0].password\r\n          );\r\n          if(comparison) {\r\n            const accessToken = jwt.sign({ username: username}, accessTokenSecret);\r\n            res.send({\r\n              code: 200,\r\n              accessToken,\r\n              success: \"login successful\",\r\n            });\r\n          } \r\n          else {\r\n            res.send({\r\n              code: 204,\r\n              error: \"Username and password does not match\",\r\n            });\r\n          }\r\n        }\r\n        else{\r\n          res.send({\r\n            \"code\":206,\r\n            \"error\": \"Username does not exist\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n  const logUser = (e) => {\r\n    Axios.post(\"http://localhost:3001/login\", {\r\n      username: username,\r\n      password: password,\r\n    }).then((response) => {\r\n      console.log(response.data)\r\n      const status = response.data.code\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      {/* Name and logo */}\r\n        <div>\r\n            <img src={volumefy} className=\"logo\"/>\r\n            <h1 className=\"h1text\"> VOLUMEFY</h1><hr/>\r\n        </div>\r\n        {/* Inputs */}\r\n        <h2>Welcome back!</h2>\r\n        {/* Get the username */}\r\n        <h2>User Name</h2>\r\n        <input className=\"input\" type=\"text\" onChange={(event) => {\r\n            setUsername(event.target.value);\r\n        }}/>\r\n        {/* Get the password */}\r\n        <h2>Password</h2>\r\n        <input className=\"input\" type=\"password\" onChange={(event) => {\r\n            setPassword(event.target.value);\r\n        }} /><br/><br/>\r\n        {/* Login */}\r\n        <button onClick={logUser}>SIGN IN</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}